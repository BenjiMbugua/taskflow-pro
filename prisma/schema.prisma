// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  preferences Json?

  // Relations
  projects         Project[]
  analytics        Analytics[]

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("projects")
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  status        TaskStatus @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  dueDate       DateTime?
  estimatedTime Int?      // in minutes
  actualTime    Int?      // in minutes
  projectId     String?
  parentId      String?   // for subtasks
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  project         Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent          Task?             @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks        Task[]            @relation("TaskHierarchy")
  pomodoroSessions PomodoroSession[]

  @@map("tasks")
}

model PomodoroSession {
  id        String   @id @default(cuid())
  taskId    String?
  duration  Int      // in minutes
  startTime DateTime
  endTime   DateTime?
  completed Boolean  @default(false)
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@map("pomodoro_sessions")
}

model Analytics {
  id                 String   @id @default(cuid())
  userId             String
  date               DateTime
  tasksCompleted     Int      @default(0)
  pomodoroSessions   Int      @default(0)
  totalFocusTime     Int      @default(0) // in minutes
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("analytics")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
